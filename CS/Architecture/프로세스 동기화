'프로세스 동기화'란, 프로세스들 사이의 실행 순서를 맞추는 것.
동기화에는 '실행순서 제어를 위한 동기화', '상호 배제를 위한 동기화'가 있다.

* 실행 흐름을 갖는 것은 모두 동기화가 돼야한다. 즉 스레드도 동기화의 대상임.

- 실행순서 제어 : 동시에 실행되는 프로세스를 올바른 순서대로 실행되도록 실행 순서를 제어하는 동기화
- 상호 배제 : 공유가 불가능한 자원의 동시 사용을 피하기 위한 알고리즘

* 임계 구역 : 공유자원에 접근하는 코드 중 동시에 실행하면 안되는 코드영역.
프로세스 a와 b가 하나의 공유자원에 접근하려고 한다. 만약 a가 임계구역에 들어가서 사용하고 있으면 b는 임계구역에 들어가려고 시도하지만 a가 임계구역의 사용을 마칠 때 까지
대기해야 한다.
이렇게 임계구역은 두 개 이상의 프로세스가 동시에 들어갈 수 없는 영역이지만(동시에 실행이 불가능한) 잘못된 실행으로 인해 동시에 들어가는 상황이 발생하기도 하는데,
그것을 '레이스 컨디션' 이라고 한다.
레이스 컨디션은 고급언어 한 줄이 저급언어 여러줄로 변환되어 실행될 때 발생하는 문제이다. 문맥교환이 적절이 안돼서...

>> 그래서 운영체제는 이 임계구역을 레이스컨디션이 일어나지 않도록 하기위한 서비스를 몇가지 제공한다.
- 상호 배제 : 한 프로세스가 임계구역에 들어갔다면 다른 프로세스는 들어갈 수 없다.
- 진행 : 임계구역이 비어있다면 임계구역에 들어가려는 프로세스는 언제든지 들어갈 수 있어야 한다.
- 유한 대기 : 임계구역에 진입하려는 프로세스가 있다면 언젠가는 반드시 진입할 수 있어야 한다. 무한대기는 안된다!

-----------------------------------------------------------------------------------------------------------------------
* 동기화 기법
[뮤텍스 락, 세마포, 모니터]

- 뮤텍스 락(MUTual EXclusion Lock) : 상호배제를 위한 동기화 도구. 탈의실에 사용중이라는 표시를 하는 역할. 임계구역에 진입하면 lock = true;, 임계구역을 나오면 lock = false;
- 세마포(semaphore) : 뮤텍스락과 비슷하지만, 공유자원이 여러 개 있는 상황에서도 사용할 수 있는 동기화 도구. 철도 신호기와 같은 역할.
- 모니터(Monitor) : 공유자원을 사용하는 인터페이스에 접근하기위한 큐를 만들어서, 모니터 안에 항상 하나의 프로세스만 들어오도록 상호배제를 위한 동기화를 한다.
