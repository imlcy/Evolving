CPU의 작동원리는 복잡하기에, 부분부분의 작동원리를 알아보면서 마지막에 CPU 전체의 작동원리를 확인해 보자.

-----------------------------------------------------------------------------------------------------------------------
* ALU와 제어장치 + 레지스터
- ALU(Arithmetic Logic Unit) : 산술/논리 연산장치

ALU는 레지스터로부터 피연산자를 전달받고, 제어장치로부터 제어신호를 전달받아 산술/논리연산을 수행한 뒤에 메모리가 아닌, 레지스터에 우선 저장한다.
-> WHY?
* CPU가 메모리에 접근하는 속도 >>>>> CPU가 레지스터에 접근하는 속도(당연하지. 레지스터는 CPU 내부에 있는거니까.)
이것이 ALU가 연산 결과를 레지스터에 저장하는 이유이다. CPU가 빨리 가져다 쓰려고 ㅋㅋ

-----------------------------------------------------------------------------------------------------------------------
* ALU는 산술/논리연산의 결과 뿐 아니라, 여러 플래그(flag)도 플래그 레지스터에 전달한다.
플래그는 0과 1로 표현하며, 플래그가 켜지면 1, 그렇지 않으면 0.
- 부호 플래그 : 음수인지 양수인지. 1일 경우 음수, 0일 경우 양수
- 제로 플래그 : 0인지 아닌지. 1일 경우 0
- 캐리 플래그 : 자리올림이 발생했는지. 1일 경우 자리올림
- 오버플로우 플래그 : 오버플로우(연산 결과가 연산결과를 담을 레지스터보다 큰 상황) 발생 시. 1일 경우 오버플로우
- 인터럽트 플래그 : 인터럽트가 가능한지. 1일 경우 인터럽트 가능
- 슈퍼바이저 플래그 : 커널모드인지 사용자모드인지. 1일 경우 커널모드, 0일 경우 사용자모드

-----------------------------------------------------------------------------------------------------------------------
* 제어장치

제어장치는 제어신호를 내보내고 명령어를 해석하는 부품. 그냥 컴퓨터의 모든 부품을 제어하는 CPU의 핵심.

- 받아들이는 것
1. 클럭(clock) : 컴퓨터의 모든 부품을 시간단위로 움직이도록 하는 신호. 이 클럭 신호의 박자에 맞춰 데이터가 이동하거나 한다.
2. 명령어 : 명령어 레지스터로부터 해석해야 할 명령어를 받아들이고 해석한 후, 제어 신호를 발생시켜 부품들에게 알려준다.
3. 플래그 : 플래그 레지스터로부터 플래그를 받아들이고 해석한 후, 제어 신호를 발생시킨다.
4. 제어 신호 : CPU뿐만 아니라, 외부의 부품들로부터 발생된 제어 신호를 제어 버스를 통해 받아들인다. 

- 내보내는 것 == 제어 신호
1. CPU 내부로 보내는 제어 신호 : ALU에게 수행할 연산을 지시하기 위해,  레지스터에게 데이터의 이동과 명령어의 해석을 위해 제어 신호를 내보낸다. 
2. CPU 외부로 보내는 제어 신호 : 메모리에게 메모리의 값을 읽거나 쓰기위해, 입출력 장치에게 입출력 장치의 값을 읽거나 쓰기위해 제어 버스를 통해 제어 신호를 내보낸다.

-----------------------------------------------------------------------------------------------------------------------
* 레지스터

CPU 내부의 저장공간. CPU가 메모리 직접 도달하는 시간이 오래걸리는 문제를 해결하기 위한 부품.

* 종류(CPU 제조사마다 다르지만, 공통적으로 사용하는 레지스터들을 알아두자)
- 프로그램 카운터      : 메모리에서 가져올 명령어의 주소를 저장.
- 메모리 주소 레지스터 : CPU에서 특정 주소의 메모리의 값을 읽고싶을 때 주소 버스로 메모리에 전달하는 주소를 저장.
- 메모리 버퍼 레지스터 : 메모리에서 데이터 버스를 통해 전달받은 '값'을 저장. 이 때, 프로그램 카운터는 +1 되어 다음 주소를 읽을 준비를 한다.
- 명령어 레지스터      : 메모리 버퍼 레지스터의 값이 이곳에 저장.
- 플래그 레지스터      : ALU가 보낸 플래그를 저장.
- 범용 레지스터        : 메모리 주소, 메모리 버퍼 레지스터는 각각 주소 버스와 데이터 버스로 주소와 데이터만 저장하지만, 범용 레지스터는 둘 다 저장할 수 있다!!
- 스택 포인터          : 스택 영역의 꼭대기를 가리키는 레지스터. 즉, 스택에 마지막으로 저장된 값의 주소를 저장.
- 베이스 레지스터      : '기준(Base) 주소'를 저장하며, 명령어의 오퍼랜드에 입력된 다른 값과 연산하여 이곳에 저장된 기준 주소에서 해당 값만큼 이동할 수 있는 로직을 실행할 수 있도록 함.
