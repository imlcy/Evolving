일반적으로 CPU의 성능 향상과 관련된 용어는 아래와 같다.
[클럭, 코어, 멀티코어, 스레드, 멀티스레드]

-----------------------------------------------------------------------------------------------------------------------
* 클럭
클럭 속도가 높은 CPU는 대부분 속도가 빠르다.
클럭 속도는 헤르츠(Hz) 단위로 측정하며, 이는 1초에 클럭이 몇 번 반복되는지를 나타낸다.
예를 들어 클럭 속도가 1Hz 이면 1초에 한 번 클럭이 똑-딱 한다는 얘기다.
(4.9GHz = 클럭이 1초에 49억번 똑딱 거린다는 뜻!)
기본 클럭속도와 최대 클럭속도가 있어서, CPU는 클럭속도를 유동적으로 조절할 수 있다.

>> 클럭 속도가 빠르다고 해서 성능이 좋아지는 건 아니다. 오히려 오버클럭(over!) 돼서 발열 등의 문제가 발생할 수 있다.


* 코어 = '명령어를 실행하는 부품'
{ ALU + 제어장치 + 레지스터 } 를 묶은 것을 코어라고도 부른다.

* 멀티코어
코어가 여러개 있는 것

>> 코어마다 처리할 연산이 적절히 분배되지 않으면 코어가 아무리 많아도 성능 향상은 미미하다.


* 스레드
- 하드웨어적 스레드 : CPU에서 사용되는 스레드. '하나의 코어가 동시에 처리하는 명령어 단위'. '논리 프로세서' 라고도 부름.
                     하나의 코어로 여러 명령어를 동시에 처리하는 CPU를 멀티스레드 프로세서(CPU)라고 함. 
- 소프트웨어적 스레드 : 프로그램(메모리 상)에서 사용되는 스레드. '하나의 프로그램에서 독립적으로 실행되는 단위'. 
                       한 번에 여러 기능을 실행하고 싶다면 여러 스레드를 프로그래밍 하면 됨.

* 멀티스레드
멀티스레드 프로세서란, 하나의 코어로 여러개의 명령어를 실행할 수 있는 CPU를 말한다.

-----------------------------------------------------------------------------------------------------------------------
* 명령어 병렬처리 기법
명령어를 빠르게 처리하기 위해 CPU를 쉬지 않고 돌리는 방법을 알아보자
[명령어 파이프라이닝, 슈퍼스칼라, 비순차적 명령어 처리 기법]


* 명령어 파이프라이닝
명령어 처리과정을 클럭 단위로 세분화 해 보면 아래와 같다.
1. 인출
2. 해석
3. 실행
4. 결과 저장

위의 네 단계가 겹치지만 않는다면 각 단계를 동시에 실행할 수 있다!
이렇게 공장 생산라인과 같이 명령어 처리를 분업화하여 겹치지 않게 처리하는 것이 명령어 파이프라이닝.

* 명령어 파이프라이닝 시 발생할 여러 위험들
- 데이터 위험 : '데이터 의존성'으로 인해 발생. 반드시 이전 명령어가 끝까지 처리 돼야만 실행할 수 있는 명령어가 있음. (변수가 엮여 있는 경우..)
- 제어 위험 : 주로 분기문으로 인해 발생. 프로그램 카운터는 현재 실행중인 명령어의 다음 주소로 갱신되는데, 갑자기 다른 주소로 건너뛰는 경우 미리 가지고 온 명령어는 무의미.
- 구조적 위험 : 서로 다른 명령어가 동시에 ALU나 레지스터를 쓰려고 하는경우 발생. 자원위험 이라고도 한다.


* 슈퍼스칼라
명령어 파이프라인을 여러개 두는 것. 슈퍼스칼라 구조로 명령어를 처리하는 CPU를 슈퍼스칼라 프로세서(CPU) 라고 부른다.


* 비순차적 명령어 처리
합법적인 새치기. 대부분의 CPU가 차용하는 기법.
꼭 순서대로 실행되지 않아도 되는 것들은 뒤로 빼서 명령어 처리의 효율성을 높이는 방법이다.

-----------------------------------------------------------------------------------------------------------------------
* CISC vs RISC
- ISA(Instruction Set Architecture) : 명령어 집합 구조. CPU의 언어이자 하드웨어가 소프트웨어를 어떻게 이해할지에 대한 약속.
- CISC(Complex Instruction Set Computer) : 복잡한 명령어 집합 구조. 인텔 x86에서 쓰는 CPU. 복잡하고 많은 종류의 가변길이 명령어를 사용한다.
- RISC(Reduced Instruction Set Computer) : 단순한 명령어 집합 구조. ARM의 CPU. 단순하고 적은 종류의 고정길이 명령어를 사용한다.

>> CISC는 불필요한 명령어들이 많고, 복잡하기 때문에 1클럭 내에서 처리되지 않는 명령어들이 있음.
   그래서, 필요한 명령어 몇개만 사용하며 + 1클럭 내에서 처리되는 고정된 길이의 명령어를 사용하는 RISC가 등장!
