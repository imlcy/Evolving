* 고급언어와 저급언어

컴퓨터는 인간이 사용하는 언어인 고급언어(C, C++, JAVA etc..)를 이해하지 못하기에,
컴퓨터가 이해할 수 있도록 저급언어(기계어, 어셈블리어)로 변환하여 명령해야 소스코드를 실행할 수 있다.

그 변환하는 방법에는 두가지가 있는데, 컴파일과 인터프리트라는 두가지 방법이 있다.

- 컴파일 : 컴파일러가 소스코드를 '통으로 번역'하여 저급언어로 변환(컴파일 언어 : C, C++, C#, JAVA 등)
          컴파일 단계와 실행단계가 분리돼 있어 실행속도가 빠름.
          하지만 오류가 하나라도 있을 시 실행 불가.
- 인터프리트 : 인터프리터가 소스코드를 '한줄한줄 번역'하여 저급언어로 변환(인터프리터 언어 : Python, Javascript, Ruby 등)
              실행단계가 분리돼있지 않아 실행속도가 느림.
              하지만 오류가 있어도 그 전 줄 까지는 실행 가능.

-----------------------------------------------------------------------------------------------------------------------
* 명령어의 구조

[연산코드 + 오퍼랜드]
- 연산코드 : 이 행동을 수행해라
- 오퍼랜드 : 데이터 또는 데이터가 저장된 위치(주로 데이터가 저장된 위치 즉, 주소를 더 많이 사용함. 그래서 '주소필드'라고 부름)
즉, 오퍼랜드를 대상으로 하여 연산코드의 행동을 수행하라는 구조임.

기계어와 어셈블리어는 전부 명령어로 되어있는데,
저급언어인 어셈블리어를 예로 들면 아래와 같다.

push          rbp
mov           rbp
add           eax, edx
pop           rbp
ret

위 어셈블리어에서 왼쪽이 연산코드, 오른쪽이 오퍼랜드이다.
연산코드를 잘 보면 푸시해라, 더해라, 팝 해라 등의 행동의 뜻이 담겨있음.

근데 오퍼랜드를 보면, 한개 또는 두개, 아니면 아얘 없는 것도 있다.
이처럼 오퍼랜드의 갯수는 여러개가 될 수도 있고, 하나도 없을 수도 있다.
각 갯수를 이용하여 0주소 명령어, 1주소 명령어, 2주소 명령어.... 라고 부른다.

* 연산코드
연산코드는 CPU마다 다른데, 공통된 것들이 있다.(영어 단어들을 외우는건 CPU마다 다르기때문에 외울필요 없음. 유형을 아는게 중요)
1. 데이터 전송(MOVE, STORE, LOAD(FETCH), PUSH, POP...)
2. 산술/논리 연산(ADD, SUBTRACT, MULTIPLY...)
3. 제어 흐름 변경(JUMP, HALT, CALL, RETURN...)
4. 입출력 제어(READ, WRITE, START IO, TEST IO...)

* 유효주소(effective address)
연산에 사용될 데이터가 저장된 위치
만약 연산에 사용될 데이터가 r1 레지스터에 저장돼 있다면, 유효주소는 r1 레지스터.

* 주소 지정 방식
연산에 사용될 데이터가 저장된 위치를 찾는 방법
- [즉시, 직접, 간접, 레지스터, 레지스터 간접] 주소지정 방식이 있음. 
